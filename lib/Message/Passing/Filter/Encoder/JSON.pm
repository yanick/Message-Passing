package Message::Passing::Filter::Encoder::JSON;
use Moo;
use MooX::Types::MooseLike::Base qw( Bool HasMethods );
use JSON::MaybeXS qw ();
use Scalar::Util qw/ blessed /;
use Try::Tiny;
use Message::Passing::Exception::Encoding;
use namespace::clean -except => 'meta';

with qw/
    Message::Passing::Role::Filter
    Message::Passing::Role::HasErrorChain
    Message::Passing::Role::SerializeObject
/;

has pretty => (
    isa => Bool,
    default => sub { 0 },
    is => 'ro',
);

has _json => (
    is      => 'lazy',
    isa     => HasMethods [qw( encode )],
    default => sub {
        my $self = shift;
        return JSON::MaybeXS->new( utf8 => 1, pretty => $self->pretty );
    },
);

sub filter {
    my ($self, $message) = @_;
    try {
        return $message unless ref($message);
        $self->_json->encode( $message );
    }
    catch {
        $self->error->consume(Message::Passing::Exception::Encoding->new(
            exception => $_,
            stringified_data => $message,
        ));
        return; # Explicitly drop the message from normal processing
    }
}

1;

=head1 NAME

Message::Passing::Role::Filter::Encoder::JSON - Encodes data structures as JSON for output

=head1 DESCRIPTION

This filter takes a hash ref or an object for a message, and serializes it to JSON.

Plain refs work as expected, and classes generated by either:

=over

=item Log::Message::Structures

=item MooseX::Storage

=back

should be correctly serialized.

=head1 METHODS

=head2 filter

Performs the JSON encoding.

=head2 pretty

Attribute controlling if JSON is pretty printed.

=head1 SEE ALSO

=over

=item L<Message::Passing>

=item L<Message::Passing::Manual::Concepts>

=back

=head1 SPONSORSHIP

This module exists due to the wonderful people at Suretec Systems Ltd.
<http://www.suretecsystems.com/> who sponsored its development for its
VoIP division called SureVoIP <http://www.surevoip.co.uk/> for use with
the SureVoIP API - 
<http://www.surevoip.co.uk/support/wiki/api_documentation>

=head1 AUTHOR, COPYRIGHT AND LICENSE

See L<Message::Passing>.

=cut

